name: C++ ToDoList - CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'todo-list-cpp-doctest-make/**'
      - '.github/workflows/cppToDoListMake.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'todo-list-cpp-doctest-make/**'
      - '.github/workflows/cpp-ci.yml'
  workflow_dispatch:
    inputs:
      version:
        description: "Tag de release (ex: v1.2.3)"
        required: true
        type: string

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ubuntu:
    name: Ubuntu build & test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: todo-list-cpp-doctest-make
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl lld

      - name: Build
        run: |
          make clean
          make

      - name: Run tests (doctest)
        run: ./bin/tests.exe --success=1

      - name: Upload artifacts (Ubuntu)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-artifacts
          path: |
            todo-list-cpp-doctest-make/bin/**
            todo-list-cpp-doctest-make/build/**

  windows-msys2:
    name: Windows (MSYS2 UCRT64) build & test
    runs-on: windows-latest
    defaults:
      run:
        working-directory: todo-list-cpp-doctest-make
    steps:
      - uses: actions/checkout@v4

      - name: Setup MSYS2 (UCRT64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-wget
            mingw-w64-ucrt-x86_64-lld

      - name: Build (mingw32-make)
        shell: msys2 {0}
        run: |
          mingw32-make clean
          mingw32-make LDFLAGS+=' -fuse-ld=lld'

      - name: Run tests (doctest)
        shell: msys2 {0}
        run: ./bin/tests.exe --success=1

      # >>> Étape ajoutée : copie des DLLs UCRT64 nécessaires dans bin/ pour un .zip portable
      - name: Bundle MinGW runtime DLLs (portable)
        shell: msys2 {0}
        run: |
          DLLDIR=/ucrt64/bin
          OUT=bin
          for f in libstdc++-6.dll libgcc_s_seh-1.dll libwinpthread-1.dll; do
            if [ -f "$DLLDIR/$f" ]; then
              cp -v "$DLLDIR/$f" "$OUT"/
            else
              echo "WARNING: $f not found in $DLLDIR"
            fi
          done

      - name: Upload artifacts (Windows)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            todo-list-cpp-doctest-make/bin/**
            todo-list-cpp-doctest-make/build/**

  release:
    name: Create tag & GitHub Release
    runs-on: ubuntu-latest
    needs: [ ubuntu, windows-msys2 ]
    if: ${{ (github.event_name == 'workflow_dispatch' && (inputs.version || '') != '') || startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/checkout@v4

      - name: Prepare version (from input or last tag +1)
        id: prep
        uses: actions/github-script@v7
        with:
          script: |
            const inputVer = core.getInput('version') || '';
            let version = inputVer;
      
            // si pas fourni, on prend le dernier tag vX.Y.Z et on bump le patch
            if (!version) {
              const tags = await github.paginate(
                github.rest.repos.listTags,
                { owner: context.repo.owner, repo: context.repo.repo, per_page: 100 }
              );
              const sv = tags.map(t => t.name)
                .filter(n => /^v\d+\.\d+\.\d+(-[0-9A-Za-z.-]+)?$/.test(n))
                .sort((a,b) => {
                  const pa = a.replace(/^v/,'').split('.').map(s=>s.split('-')[0]).map(Number);
                  const pb = b.replace(/^v/,'').split('.').map(s=>s.split('-')[0]).map(Number);
                  // tri desc
                  return (pb[0]-pa[0]) || (pb[1]-pa[1]) || (pb[2]-pa[2]);
                });
              if (sv.length === 0) {
                version = 'v1.0.0';
              } else {
                const [M,m,p] = sv[0].replace(/^v/,'').split('.')[0].split('-')[0]
                  ? sv[0].replace(/^v/,'').split('-')[0].split('.').map(Number)
                  : sv[0].replace(/^v/,'').split('.').map(Number);
                version = `v${M}.${m}.${p+1}`;
              }
              core.info(`Auto-bumped version -> ${version}`);
            }
      
            if (!/^v\d+\.\d+\.\d+(-[0-9A-Za-z.-]+)?$/.test(version)) {
              core.setFailed(`Version invalide: ${version}. Format attendu: vMAJOR.MINOR.PATCH`);
              return;
            }
            core.setOutput('version', version);
      
            // si déclenché manuellement, (re)crée/maj le tag sur le HEAD
            if (context.eventName === 'workflow_dispatch') {
              const sha = context.sha;
              const ref = `refs/tags/${version}`;
              try {
                await github.rest.git.getRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `tags/${version}` });
                core.info(`Tag ${version} existe déjà -> MAJ sur ${sha}`);
                await github.rest.git.updateRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `tags/${version}`, sha, force: true });
              } catch {
                core.info(`Création du tag ${version} -> ${sha}`);
                await github.rest.git.createRef({ owner: context.repo.owner, repo: context.repo.repo, ref, sha });
              }
            }


      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Package binaries
        run: |
          mkdir -p dist
          # zips séparés pour Ubuntu et Windows (on ne garde que bin/)
          if [ -d "artifacts/ubuntu-artifacts/todo-list-cpp-doctest-make/bin" ]; then
            (cd artifacts/ubuntu-artifacts/todo-list-cpp-doctest-make && zip -r ../../../dist/ToDoList-ubuntu-bin.zip bin)
          fi
          if [ -d "artifacts/windows-artifacts/todo-list-cpp-doctest-make/bin" ]; then
            (cd artifacts/windows-artifacts/todo-list-cpp-doctest-make && zip -r ../../../dist/ToDoList-windows-bin.zip bin)
          fi
          ls -l dist || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.prep.outputs.version }}
          name: Release ${{ steps.prep.outputs.version }}
          generate_release_notes: true
          files: |
            dist/*.zip
