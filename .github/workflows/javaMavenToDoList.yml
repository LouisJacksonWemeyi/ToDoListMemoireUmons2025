name: CI/CD Maven ToDoList (Java 24.0.1)

on:
  push:
    branches: [ "**" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:
    inputs:
      version:
        description: "Version au format vMAJOR.MINOR.PATCH (ex: v1.2.3)"
        required: false
        default: ""

permissions:
  contents: write

env:
  MAVEN_VERSION: "3.9.10"
  MAVEN_HOME: "${{ runner.temp }}/apache-maven-3.9.10"
  MAVEN_OPTS: "-Dmaven.repo.local=${{ runner.temp }}/.m2/repository"

jobs:
  ci:
    name: Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: todo-list-java-maven
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 24.0.1 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 24.0.1

      - name: Cache Maven repository (~/.m2)
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            m2-${{ runner.os }}-

      - name: Install Apache Maven ${{ env.MAVEN_VERSION }}
        run: |
          cd "${{ runner.temp }}"
          curl -fsSLO https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz
          tar -xzf apache-maven-${MAVEN_VERSION}-bin.tar.gz
          echo "${MAVEN_HOME}/bin" >> $GITHUB_PATH

      - name: Create ~/.m2/toolchains.xml (force JDK 24.0.1)
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/toolchains.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <toolchains xmlns="http://maven.apache.org/TOOLCHAINS/1.1.0"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://maven.apache.org/TOOLCHAINS/1.1.0 https://maven.apache.org/xsd/toolchains-1.1.0.xsd">
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>24.0.1</version>
                <vendor>any</vendor>
              </provides>
              <configuration>
                <jdkHome>${env.JAVA_HOME}</jdkHome>
              </configuration>
            </toolchain>
          </toolchains>
          EOF

      - name: Maven - Build & Test (JUnit 5.10.2)
        run: mvn -B -ntp clean verify

      - name: Upload build artifacts (target/)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maven-target-${{ github.sha }}
          path: todo-list-java-maven/target/

  release:
    name: Create Tag & GitHub Release
    needs: ci
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/')
    defaults:
      run:
        working-directory: todo-list-java-maven
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java 24.0.1 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 24.0.1

      - name: Cache Maven repository (~/.m2)
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            m2-${{ runner.os }}-

      - name: Install Apache Maven ${{ env.MAVEN_VERSION }}
        run: |
          cd "${{ runner.temp }}"
          curl -fsSLO https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz
          tar -xzf apache-maven-${MAVEN_VERSION}-bin.tar.gz
          echo "${MAVEN_HOME}/bin" >> $GITHUB_PATH

      - name: Create ~/.m2/toolchains.xml (force JDK 24.0.1)
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/toolchains.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <toolchains xmlns="http://maven.apache.org/TOOLCHAINS/1.1.0"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://maven.apache.org/TOOLCHAINS/1.1.0 https://maven.apache.org/xsd/toolchains-1.1.0.xsd">
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>24.0.1</version>
                <vendor>any</vendor>
              </provides>
              <configuration>
                <jdkHome>${env.JAVA_HOME}</jdkHome>
              </configuration>
            </toolchain>
          </toolchains>
          EOF

      - name: Build package (incl. tests)
        run: mvn -B -ntp clean package

      - name: Resolve release version (tag)
        id: version
        shell: bash
        run: |
          INPUT_VER="${{ github.event.inputs.version }}"
          if [[ -z "$INPUT_VER" && "${GITHUB_REF}" == refs/tags/* ]]; then
            INPUT_VER="${GITHUB_REF#refs/tags/}"
          fi
          if [[ -z "$INPUT_VER" ]]; then
            echo "ERROR: aucune version fournie et ce n'est pas un push de tag." >&2
            exit 1
          fi
          if [[ ! "$INPUT_VER" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.\-]+)?$ ]]; then
            echo "ERROR: version invalide: $INPUT_VER ; attendu vMAJOR.MINOR.PATCH" >&2
            exit 1
          fi
          echo "version=$INPUT_VER" >> "$GITHUB_OUTPUT"

      - name: Create or update tag
        uses: actions/github-script@v7
        with:
          script: |
            const version = core.getInput('version', { required: true });
            const sha = context.sha;
            const ref = `refs/tags/${version}`;
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${version}`,
              });
              core.info(`Tag ${version} existe déjà -> mise à jour sur ${sha}`);
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${version}`,
                sha,
                force: true
              });
            } catch (e) {
              core.info(`Création du tag ${version} -> ${sha}`);
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref,
                sha
              });
            }
          result-encoding: string
        env:
          version: ${{ steps.version.outputs.version }}

      - name: Déterminer le JAR à publier
        id: jar
        shell: bash
        run: |
          FILE="$(ls -1 target/*.jar | grep -v '\-sources\.jar$' | grep -v '\-javadoc\.jar$' | head -n1)"
          if [[ -z "$FILE" ]]; then
            echo "ERROR: aucun JAR trouvé dans target/" >&2
            ls -l target || true
            exit 1
          fi
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "name=$(basename "$FILE")" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            ${{ steps.jar.outputs.file }}
          generate_release_notes: true
