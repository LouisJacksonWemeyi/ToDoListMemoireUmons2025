name: CI/CD .NET ToDoListApp

on:
  push:
    branches: [ "main", "master" ]
    paths: [ "ToDoListNetSDK/**" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main", "master" ]
    paths: [ "ToDoListNetSDK/**" ]
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (format: vMAJOR.MINOR.PATCH[-rcX])"
        required: false
      prerelease:
        description: "Marquer la release comme préversion ?"
        required: false
        type: boolean
        default: false

permissions:
  contents: write

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
  APP_CSPROJ: ToDoListNetSDK/src/ToDoApp/ToDoApp.csproj
  TEST_CSPROJ: ToDoListNetSDK/tests/ToDoApp.Tests/ToDoApp.Tests.csproj

jobs:
  ci:
    name: Build & Test (.NET)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 6.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "6.x"

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Restore
        run: |
          # Sécurité : s'assurer qu'aucune var env "Version/VERSION" ne traîne
          pwsh -NoLogo -NoProfile -Command "Remove-Item Env:Version -ErrorAction SilentlyContinue; Remove-Item Env:VERSION -ErrorAction SilentlyContinue"
          dotnet restore "${{ env.APP_CSPROJ }}"
          dotnet restore "${{ env.TEST_CSPROJ }}"

      - name: Build (Debug)
        run: |
          dotnet build "${{ env.APP_CSPROJ }}" -c Debug --no-restore
          dotnet build "${{ env.TEST_CSPROJ }}" -c Debug --no-restore

      - name: Test
        run: dotnet test "${{ env.TEST_CSPROJ }}" -c Debug --no-build --verbosity normal

  release:
    name: Create Tag + Release + Publish DLL/EXE
    runs-on: windows-latest
    needs: [ci]
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 6.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "6.x"

      - name: Compute TAG & APP_VERSION
        id: vars
        shell: pwsh
        run: |
          $tag = "${{ github.event.inputs.version }}".Trim()
          if (-not $tag) {
            if ("${{ github.ref }}".StartsWith("refs/tags/")) { $tag = "${{ github.ref }}".Replace("refs/tags/","") }
          }
          if (-not $tag) { Write-Error "Aucune version fournie et ce n’est pas un push de tag."; exit 1 }
          if ($tag -notmatch '^v\d+\.\d+\.\d+(-[0-9A-Za-z\.-]+)?$') {
            Write-Error "Version invalide: $tag. Format attendu: vMAJOR.MINOR.PATCH"
            exit 1
          }
          $app = $tag.TrimStart('v')  # 1.0.5
          "TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Append
          "APP_VERSION=$app" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "TAG=$tag"
          Write-Host "APP_VERSION=$app"

      - name: Create or update tag (manual dispatch only)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const tag = process.env.TAG;
            const sha = context.sha;
            const refTag = `refs/tags/${tag}`;
            try {
              await github.rest.git.getRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `tags/${tag}` });
              core.info(`Tag ${tag} existe déjà -> mise à jour vers ${sha}`);
              await github.rest.git.updateRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `tags/${tag}`, sha, force: true });
            } catch (e) {
              core.info(`Création du tag ${tag} -> ${sha}`);
              await github.rest.git.createRef({ owner: context.repo.owner, repo: context.repo.repo, ref: refTag, sha });
            }

      - name: Restore
        run: |
          # Important : on ne définit PAS de variable d'env "VERSION/Version"
          pwsh -NoLogo -NoProfile -Command "Remove-Item Env:Version -ErrorAction SilentlyContinue; Remove-Item Env:VERSION -ErrorAction SilentlyContinue"
          dotnet restore "${{ env.APP_CSPROJ }}"
          dotnet restore "${{ env.TEST_CSPROJ }}"

      - name: Build & Test (Release)
        run: |
          dotnet build "${{ env.APP_CSPROJ }}" -c Release --no-restore
          dotnet build "${{ env.TEST_CSPROJ }}" -c Release --no-restore
          dotnet test  "${{ env.TEST_CSPROJ }}" -c Release --no-build --verbosity normal

      # Publication framework-dependent -> DLL + apphost EXE
      - name: Publish (framework-dependent)
        shell: pwsh
        run: |
          $out = "publish/fwdep"
          dotnet publish "${{ env.APP_CSPROJ }}" -c Release `
            -p:UseAppHost=true `
            --no-build -o "$out"
          Compress-Archive -Path "$out/*" -DestinationPath "ToDoApp-fwdep-${{ env.TAG }}.zip"

      # Publication Windows self-contained single-file -> EXE
      - name: Publish (win-x64 self-contained)
        shell: pwsh
        run: |
          $out = "publish/win-x64"
          dotnet publish "${{ env.APP_CSPROJ }}" -c Release -r win-x64 `
            -p:PublishSingleFile=true -p:SelfContained=true -p:IncludeNativeLibrariesForSelfExtract=true `
            --no-build -o "$out"
          Compress-Archive -Path "$out/*" -DestinationPath "ToDoApp-win-x64-${{ env.TAG }}.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ToDoApp-${{ env.TAG }}
          path: |
            ToDoApp-fwdep-${{ env.TAG }}.zip
            ToDoApp-win-x64-${{ env.TAG }}.zip
          if-no-files-found: error
          retention-days: 7

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: Release ${{ env.TAG }}
          body: |
            Release ${{ env.TAG }} — ToDoApp (.NET 6)
            Artefacts:
            - Framework-dependent (DLL + apphost EXE): ToDoApp-fwdep-${{ env.TAG }}.zip
            - Windows self-contained single-file (EXE): ToDoApp-win-x64-${{ env.TAG }}.zip
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            ToDoApp-fwdep-${{ env.TAG }}.zip
            ToDoApp-win-x64-${{ env.TAG }}.zip
