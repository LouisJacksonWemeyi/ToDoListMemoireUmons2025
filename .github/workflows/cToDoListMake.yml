name: CI/CD C ToDoList

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (format vMAJOR.MINOR.PATCH[-prerelease])'
        required: false
        default: ''

permissions:
  contents: write   # nécessaire pour créer tag + release

jobs:
  build-test:
    name: Build & Tests (Windows + MSYS2/MinGW)
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSYS2 (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-make
            mingw-w64-x86_64-curl
            zip

      - name: Build (make)
        run: mingw32-make

      - name: Run unit tests
        run: ./build/tests.exe

      - name: Package app
        run: |
          mkdir -p dist
          cp ./build/todo_app.exe dist/
          cd dist
          zip -9 "todo_app-win-x64.zip" "todo_app.exe"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: todo_app-win-x64
          path: dist/

  release:
    name: Create Tag & GitHub Release
    needs: build-test
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') }}
    runs-on: windows-latest
    env:
      DISPATCH_VERSION: ${{ github.event.inputs.version }}
    steps:
      - name: Determine version
        id: ver
        uses: actions/github-script@v7
        with:
          script: |
            const inputVer = process.env.DISPATCH_VERSION || '';
            let version = inputVer;
            if (!version && context.ref && context.ref.startsWith('refs/tags/')) {
              version = context.ref.replace('refs/tags/','');
            }
            if (!version) {
              core.setFailed('Aucune version fournie et ce n’est pas un push de tag.');
              return;
            }
            if (!/^v\d+\.\d+\.\d+(-[0-9A-Za-z.-]+)?$/.test(version)) {
              core.setFailed(`Version invalide: ${version}. Format attendu: vMAJOR.MINOR.PATCH`);
              return;
            }
            core.setOutput('version', version);

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: todo_app-win-x64
          path: dist

      - name: Create or update tag
        uses: actions/github-script@v7
        env:
          VERSION: ${{ steps.ver.outputs.version }}
        with:
          script: |
            const v = process.env.VERSION;
            const sha = context.sha;
            const ref = `refs/tags/${v}`;
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${v}`,
              });
              core.info(`Tag ${v} existe déjà -> mise à jour sur ${sha}`);
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${v}`,
                sha,
                force: true
              });
            } catch (e) {
              core.info(`Création du tag ${v} -> ${sha}`);
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref,
                sha
              });
            }

      - name: Rename assets with version
        shell: bash
        run: |
          cd dist
          if [ -f "todo_app-win-x64.zip" ]; then mv "todo_app-win-x64.zip" "todo_app-win-x64-${{ steps.ver.outputs.version }}.zip"; fi
          if [ -f "todo_app.exe" ]; then mv "todo_app.exe" "todo_app-${{ steps.ver.outputs.version }}.exe"; fi
          ls -al

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.version }}
          name: Release ${{ steps.ver.outputs.version }}
          body: |
            Release auto-générée pour ${{ steps.ver.outputs.version }}.
            - Build: Windows (MSYS2/MinGW64) via Makefile
            - Tests: Acutest (C) ✅
          files: |
            dist/todo_app-${{ steps.ver.outputs.version }}.exe
            dist/todo_app-win-x64-${{ steps.ver.outputs.version }}.zip
