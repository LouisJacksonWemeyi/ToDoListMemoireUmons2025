name: CI/CD Gradle ToDoList

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]       # push d'un tag vX.Y.Z => release auto
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (format vMAJOR.MINOR.PATCH)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

env:
  PROJECT_DIR: todo-list-java-gradle   # adapte si besoin

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Debug : lister le contenu et afficher le wrapper.properties (ne bloque pas)
      - name: Debug wrapper contents (non-blocking)
        continue-on-error: true
        run: |
          echo "== DEBUG WRAPPER =="
          echo "PROJECT_DIR=$PROJECT_DIR"
          ls -la "$PROJECT_DIR" || true
          ls -la "$PROJECT_DIR/gradle" || true
          ls -la "$PROJECT_DIR/gradle/wrapper" || true
          if [ -f "$PROJECT_DIR/gradle/wrapper/gradle-wrapper.properties" ]; then
            echo "---- gradle-wrapper.properties ----"
            cat "$PROJECT_DIR/gradle/wrapper/gradle-wrapper.properties"
          fi

      # Fallback local : vérifs souples (ne bloque pas le pipeline)
      - name: Fallback local wrapper sanity check (non-blocking)
        continue-on-error: true
        run: |
          ok=1
          [ -f "$PROJECT_DIR/gradlew" ] || { echo "::warning::gradlew introuvable dans $PROJECT_DIR"; ok=0; }
          [ -f "$PROJECT_DIR/gradle/wrapper/gradle-wrapper.jar" ] || { echo "::warning::gradle-wrapper.jar introuvable"; ok=0; }
          if [ -f "$PROJECT_DIR/gradle/wrapper/gradle-wrapper.properties" ]; then
            if grep -Eq '^distributionUrl=https://services\.gradle\.org/distributions/gradle-[0-9.]+-(bin|all)\.zip' "$PROJECT_DIR/gradle/wrapper/gradle-wrapper.properties"; then
              echo "distributionUrl OK"
            else
              echo "::warning::distributionUrl inattendu. Attendu: .../(bin|all).zip"
              ok=0
            fi
          else
            echo "::warning::gradle-wrapper.properties introuvable"
            ok=0
          fi
          if [ "$ok" -eq 0 ]; then
            echo "::warning::Problème(s) détecté(s) mais on continue (timeouts réseau sur la validation distante)."
          fi

      - name: Set up Java 24 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'
          cache: 'gradle'

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x "$PROJECT_DIR/gradlew"

      - name: Build & Test (JUnit 5.10.2)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          ./gradlew --version
          ./gradlew clean test jar --console=plain

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-jars
          path: ${{ env.PROJECT_DIR }}/build/libs/*.jar
          if-no-files-found: error

  release:
    name: Create Tag & GitHub Release
    needs: build-test
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve version
        id: resolve
        uses: actions/github-script@v7
        with:
          script: |
            const inputVer = core.getInput('version') || '';
            let version = inputVer;
            if (!version && context.ref && context.ref.startsWith('refs/tags/')) {
              version = context.ref.replace('refs/tags/','');
            }
            if (!version) core.setFailed('Aucune version fournie et ce n’est pas un push de tag.');
            if (!/^v\d+\.\d+\.\d+(-[0-9A-Za-z.-]+)?$/.test(version)) {
              core.setFailed(`Version invalide: ${version}. Format attendu: vMAJOR.MINOR.PATCH`);
            }
            core.setOutput('version', version);

      - name: Create tag if needed (workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.resolve.outputs.version }}';
            const sha = context.sha;
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${version}`
              });
              core.setFailed(`Le tag ${version} existe déjà.`);
            } catch (e) {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${version}`,
                sha
              });
              core.info(`Créé le tag ${version} -> ${sha}`);
            }

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-jars
          path: release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.resolve.outputs.version }}
          name: ${{ steps.resolve.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release/*.jar
